# name: Deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#       - name: Build and Push FastAPI Image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest .
#           docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest

#       - name: Build and Push Nginx Image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/nginx-proxy -f Dockerfile.nginx .
#           docker push ${{ secrets.DOCKER_USERNAME }}/nginx-proxy:latest

#       - name: Deploy on Server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
#             docker pull ${{ secrets.DOCKER_USERNAME }}/nginx-proxy:latest
#             docker stop fastapi_app || true
#             docker stop nginx_proxy || true
#             docker rm fastapi_app || true
#             docker rm nginx_proxy || true
#             docker run -d --name fastapi_app -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
#             docker run -d --name nginx_proxy -p 80:80 ${{ secrets.DOCKER_USERNAME }}/nginx-proxy:latest


name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push FastAPI Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest

      - name: Build and Push Nginx Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nginx-proxy -f Dockerfile.nginx .
          docker push ${{ secrets.DOCKER_USERNAME }}/nginx-proxy:latest

      - name: Deploy on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Ensure Docker is installed
            if ! command -v docker &> /dev/null
            then
                echo "Installing Docker..."
                sudo apt-get update -y
                sudo apt-get install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
            fi

            # Ensure Docker Compose is installed
            if ! command -v docker-compose &> /dev/null
            then
                echo "Installing Docker Compose..."
                sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Navigate to the project directory
            cd /home/ubuntu/fastapi-book || git clone https://github.com/${{ github.repository }}.git fastapi-book && cd fastapi-book
            
            # Pull latest changes
            git pull origin main

            # Pull latest Docker images
            docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/nginx-proxy:latest

            # Stop and remove old containers
            docker-compose down

            # Start new containers
            docker-compose up -d --build

            # Verify running containers
            docker ps
